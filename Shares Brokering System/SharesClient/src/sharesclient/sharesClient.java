//9"
// Code to create Shares Client with UI for consuming the webservices

package sharesclient;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.*;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dayee
 */
public class sharesClient extends javax.swing.JFrame {

    String BuySell = "http://localhost:8084/SharesBrokeringWS/webresources/buySell";
    String ListAll = "http://localhost:8084/SharesBrokeringWS/webresources/listDetails";
    String jsonList = "http://localhost:8084/SharesBrokeringWS/webresources/returnJson";
    String URL_code = "http://localhost:8084/SharesBrokeringWS/webresources/displayCodes";
    String convert = "http://localhost:8084/CurConvRS/webresources/exchangeRate";
    String URL_latest = "http://localhost:8084/SharesBrokeringWS/webresources/latestRate";
    /**
     * Creates new form sharesClient
     */
    
    public sharesClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        Exit = new javax.swing.JButton();
        listAllShares = new javax.swing.JButton();
        highestPrice = new javax.swing.JButton();
        highestShares = new javax.swing.JButton();
        updateShares = new javax.swing.JButton();
        buy_code = new javax.swing.JTextField();
        sell_code = new javax.swing.JTextField();
        buy_No = new javax.swing.JTextField();
        sell_No = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lowestPrice = new javax.swing.JButton();
        lowestShares = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        conv_code = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        curr_code = new javax.swing.JTextField();
        currencyConvertor = new javax.swing.JButton();
        latestRates = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmp_code = new javax.swing.JTextField();
        search_button = new javax.swing.JButton();
        display_code = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Shares Brokering Service", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(153, 153, 255))); // NOI18N
        jScrollPane1.setViewportView(textArea);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        listAllShares.setText("List All Shares");
        listAllShares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllSharesActionPerformed(evt);
            }
        });

        highestPrice.setText("Display Highest Price Details");
        highestPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highestPriceActionPerformed(evt);
            }
        });

        highestShares.setText("Display Highest Shares Details");
        highestShares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highestSharesActionPerformed(evt);
            }
        });

        updateShares.setText("Update Shares");
        updateShares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSharesActionPerformed(evt);
            }
        });

        buy_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buy_NoActionPerformed(evt);
            }
        });

        jLabel1.setText("Buy Shares Code:");

        jLabel2.setText("Sell Shares Code:");

        jLabel3.setText("Buy Shares No:");

        jLabel4.setText("Sell Shares No:");

        lowestPrice.setText("Display Lowest Price Details");
        lowestPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowestPriceActionPerformed(evt);
            }
        });

        lowestShares.setText("Display Lowest Shares Details");
        lowestShares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowestSharesActionPerformed(evt);
            }
        });

        jLabel5.setText("Comapny Code:");

        jLabel6.setText("Currency Code:");

        currencyConvertor.setText("Convert Currency");
        currencyConvertor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyConvertorActionPerformed(evt);
            }
        });

        latestRates.setText("Get Latest Share Price Rate");
        latestRates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latestRatesActionPerformed(evt);
            }
        });

        jLabel7.setText("Enter Company Code:");

        search_button.setText("Search Details of Company");
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        display_code.setText("Display Currency Codes");
        display_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display_codeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listAllShares, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(highestPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(highestShares, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(116, 116, 116)
                        .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateShares, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lowestShares, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                                .addComponent(lowestPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buy_code, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buy_No, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sell_code, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sell_No, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(latestRates, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currencyConvertor, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(85, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmp_code, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(conv_code, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(curr_code, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(display_code, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(listAllShares)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highestPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highestShares))
                            .addComponent(Exit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buy_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sell_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buy_No, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(sell_No, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateShares)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lowestPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lowestShares)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cmp_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(display_code)
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(conv_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(curr_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currencyConvertor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(latestRates)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buy_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buy_NoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buy_NoActionPerformed

    private void updateSharesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSharesActionPerformed
        // TODO add your handling code here:
        String buyCompany = buy_code.getText();
        String sellCompany = sell_code.getText();
        String buyCompanyNo = buy_No.getText();
        String sellCompanyNo = sell_No.getText();
        
        String URL_Buy = BuySell + "?fromCmp=" + buyCompany + "&toCmp=" + sellCompany + "&Buy=" + buyCompanyNo+"&Sell="+sellCompanyNo;
        try
        {
            URL url = new URL(URL_Buy);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder str = new StringBuilder();
            while((output = br.readLine())!= null)
            {
                str.append(output + "\n");
            }
            
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateSharesActionPerformed

    private void listAllSharesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllSharesActionPerformed
        // TODO add your handling code here:
         try
        {
            URL url = new URL(ListAll);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder str = new StringBuilder();
            
            while((output = br.readLine())!= null)
            {
                str.append(output + "\n");
            }
            
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listAllSharesActionPerformed

    private void highestPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highestPriceActionPerformed
        // TODO add your handling code here:
        try
        {
            URL url = new URL(jsonList);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder st = new StringBuilder();
            
            ArrayList<String> names = new ArrayList<String>();
            ArrayList<String> symbols = new ArrayList<String>();
            ArrayList<Long> numbers = new ArrayList<Long>();
            ArrayList<String> currencies = new ArrayList<String>();
            ArrayList<Double> prices = new ArrayList<Double>();
            ArrayList<String> dates = new ArrayList<String>();
            
            Double max = 0.0; int index = 0;
            
            while((output = br.readLine())!= null)
            {
                st.append(output + "\n");
            }
            
            String result = st.toString();
            
            JSONParser parser = new JSONParser();
            StringBuilder str = new StringBuilder();
            
            JSONObject jsonObject = (JSONObject) parser.parse(result);
            JSONArray companies = (JSONArray)jsonObject.get("Company");
            
            for(Object o : companies)
            {
                JSONObject company = (JSONObject) o;
                String name = (String)company.get("companyName");
                String symbol = (String)company.get("companySymbol");
                Long number = (Long)company.get("number");
                String currency = (String)company.get("currency");
                Double price = (Double)company.get("price");
                String date = (String)company.get("date");
                
                names.add(name);
                symbols.add(symbol);
                numbers.add(number);
                currencies.add(currency);
                prices.add(price);
                dates.add(date);
                
                max = Collections.max(prices);
                index = prices.indexOf(max);
                 
            }
            
            str.append("=======================================================\n");
            str.append("Details of the Company with the Highest Share Price:\n");
            str.append("=======================================================\n");
            str.append(names.get(index) + "\n" + symbols.get(index) + "\n" + numbers.get(index)+ "\n" + 
                    currencies.get(index)+ "\n" + prices.get(index)+ "\n" + 
                        dates.get(index));
            //str.append(max);
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_highestPriceActionPerformed

    private void highestSharesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highestSharesActionPerformed
        // TODO add your handling code here:
        
        Double max = 0.0 ; int index = 0;
        try
        {
            URL url = new URL(jsonList);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder st = new StringBuilder();
            
            ArrayList<String> names = new ArrayList<String>();
            ArrayList<String> symbols = new ArrayList<String>();
            ArrayList<Double> numbers = new ArrayList<Double>();
            ArrayList<String> currencies = new ArrayList<String>();
            ArrayList<Double> prices = new ArrayList<Double>();
            ArrayList<String> dates = new ArrayList<String>();
            
           
            
            while((output = br.readLine())!= null)
            {
                st.append(output + "\n");
            }
            
            String result = st.toString();
            
            JSONParser parser = new JSONParser();
            StringBuilder str = new StringBuilder();
            
            JSONObject jsonObject = (JSONObject) parser.parse(result);
            JSONArray companies = (JSONArray)jsonObject.get("Company");
            
            for(Object o : companies)
            {
                JSONObject company = (JSONObject) o;
                String name = (String)company.get("companyName");
                String symbol = (String)company.get("companySymbol");
                Long number = (Long)company.get("number");
                String currency = (String)company.get("currency");
                Double price = (Double)company.get("price");
                String date = (String)company.get("date");
                
                names.add(name);
                symbols.add(symbol);
                numbers.add(number.doubleValue());
                currencies.add(currency);
                prices.add(price);
                dates.add(date);
                
                max = Collections.max(numbers);
                index = numbers.indexOf(max);
                 
            }
            
            str.append("=======================================================\n");
            str.append("Details of the Company with the Highest Number of Shares:\n");
            str.append("=======================================================\n");
            str.append(names.get(index) + "\n" + symbols.get(index) + "\n" + numbers.get(index)+ "\n" + 
                    currencies.get(index)+ "\n" + prices.get(index)+ "\n" + 
                        dates.get(index));
            //str.append(max);
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_highestSharesActionPerformed

    private void lowestPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowestPriceActionPerformed
        // TODO add your handling code here:
        
        try
        {
            URL url = new URL(jsonList);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder st = new StringBuilder();
            
            ArrayList<String> names = new ArrayList<String>();
            ArrayList<String> symbols = new ArrayList<String>();
            ArrayList<Long> numbers = new ArrayList<Long>();
            ArrayList<String> currencies = new ArrayList<String>();
            ArrayList<Double> prices = new ArrayList<Double>();
            ArrayList<String> dates = new ArrayList<String>();
            
            Double min = 0.0; int index = 0;
            
            while((output = br.readLine())!= null)
            {
                st.append(output + "\n");
            }
            
            String result = st.toString();
            
            JSONParser parser = new JSONParser();
            StringBuilder str = new StringBuilder();
            
            JSONObject jsonObject = (JSONObject) parser.parse(result);
            JSONArray companies = (JSONArray)jsonObject.get("Company");
            
            for(Object o : companies)
            {
                JSONObject company = (JSONObject) o;
                String name = (String)company.get("companyName");
                String symbol = (String)company.get("companySymbol");
                Long number = (Long)company.get("number");
                String currency = (String)company.get("currency");
                Double price = (Double)company.get("price");
                String date = (String)company.get("date");
                
                names.add(name);
                symbols.add(symbol);
                numbers.add(number);
                currencies.add(currency);
                prices.add(price);
                dates.add(date);
                
                min = Collections.min(prices);
                index = prices.indexOf(min);
                 
            }
            
            str.append("=======================================================\n");
            str.append("Details of the Company with the Lowest Share Price:\n");
            str.append("=======================================================\n");
            str.append(names.get(index) + "\n" + symbols.get(index) + "\n" + numbers.get(index)+ "\n" + 
                    currencies.get(index)+ "\n" + prices.get(index)+ "\n" + 
                        dates.get(index));
            //str.append(max);
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lowestPriceActionPerformed

    private void lowestSharesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowestSharesActionPerformed
        // TODO add your handling code here:
        Double min = 0.0 ; int index = 0;
        try
        {
            URL url = new URL(jsonList);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder st = new StringBuilder();
            
            ArrayList<String> names = new ArrayList<String>();
            ArrayList<String> symbols = new ArrayList<String>();
            ArrayList<Double> numbers = new ArrayList<Double>();
            ArrayList<String> currencies = new ArrayList<String>();
            ArrayList<Double> prices = new ArrayList<Double>();
            ArrayList<String> dates = new ArrayList<String>();
            
            while((output = br.readLine())!= null)
            {
                st.append(output + "\n");
            }
            
            String result = st.toString();
            
            JSONParser parser = new JSONParser();
            StringBuilder str = new StringBuilder();
            
            JSONObject jsonObject = (JSONObject) parser.parse(result);
            JSONArray companies = (JSONArray)jsonObject.get("Company");
            
            for(Object o : companies)
            {
                JSONObject company = (JSONObject) o;
                String name = (String)company.get("companyName");
                String symbol = (String)company.get("companySymbol");
                Long number = (Long)company.get("number");
                String currency = (String)company.get("currency");
                Double price = (Double)company.get("price");
                String date = (String)company.get("date");
                
                names.add(name);
                symbols.add(symbol);
                numbers.add(number.doubleValue());
                currencies.add(currency);
                prices.add(price);
                dates.add(date);
                
                min = Collections.min(numbers);
                index = numbers.indexOf(min);
                 
            }
            
            str.append("=======================================================\n");
            str.append("Details of the Company with the Lowest Number of Shares:\n");
            str.append("=======================================================\n");
            str.append(names.get(index) + "\n" + symbols.get(index) + "\n" + numbers.get(index)+ "\n" + 
                    currencies.get(index)+ "\n" + prices.get(index)+ "\n" + 
                        dates.get(index));
            //str.append(max);
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_lowestSharesActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
        // TODO add your handling code here:
        String code = cmp_code.getText().toString();
        int index = 0;
        
        try
        {
            URL url = new URL(jsonList);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder st = new StringBuilder();
            
            ArrayList<String> names = new ArrayList<String>();
            ArrayList<String> symbols = new ArrayList<String>();
            ArrayList<Double> numbers = new ArrayList<Double>();
            ArrayList<String> currencies = new ArrayList<String>();
            ArrayList<Double> prices = new ArrayList<Double>();
            ArrayList<String> dates = new ArrayList<String>();
            
            while((output = br.readLine())!= null)
            {
                st.append(output + "\n");
            }
            
            String result = st.toString();
            
            JSONParser parser = new JSONParser();
            StringBuilder str = new StringBuilder();
            
            JSONObject jsonObject = (JSONObject) parser.parse(result);
            JSONArray companies = (JSONArray)jsonObject.get("Company");
            
            for(Object o : companies)
            {
                JSONObject company = (JSONObject) o;
                String name = (String)company.get("companyName");
                String symbol = (String)company.get("companySymbol");
                Long number = (Long)company.get("number");
                String currency = (String)company.get("currency");
                Double price = (Double)company.get("price");
                String date = (String)company.get("date");
                
                names.add(name);
                symbols.add(symbol);
                numbers.add(number.doubleValue());
                currencies.add(currency);
                prices.add(price);
                dates.add(date);
                
                index = symbols.indexOf(code);
                 
            }
            
            str.append("=======================================================\n");
            str.append("Details of the Company you searched for:\n");
            str.append("=======================================================\n");
            str.append(names.get(index) + "\n" + symbols.get(index) + "\n" + numbers.get(index)+ "\n" + 
                    currencies.get(index)+ "\n" + prices.get(index)+ "\n" + 
                        dates.get(index));
            //str.append(max);
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_search_buttonActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void display_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display_codeActionPerformed
        // TODO add your handling code here:
        try
        {
            URL url = new URL(URL_code);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder str = new StringBuilder();
            
            while((output = br.readLine())!= null)
            {
                str.append(output + "\n");
            }
            
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_display_codeActionPerformed

    private void currencyConvertorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyConvertorActionPerformed
        // TODO add your handling code here:
        String URL_convert = convert + "?fromCur=USD" + "&toCur=" + curr_code.getText().toString();
        String code = conv_code.getText().toString();
        int index = 0;
        StringBuilder st = new StringBuilder();
        StringBuilder str = new StringBuilder();
        StringBuilder str2 = new StringBuilder();
        String rate = ""; Double new_price = 0.0;
        
        ArrayList<String> names = new ArrayList<String>();
        ArrayList<String> symbols = new ArrayList<String>();
        ArrayList<Double> numbers = new ArrayList<Double>();
        ArrayList<String> currencies = new ArrayList<String>();
        ArrayList<Double> prices = new ArrayList<Double>();
        ArrayList<String> dates = new ArrayList<String>();
        
        try
        {
            URL url = new URL(jsonList);
            URL url2 = new URL(URL_convert);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            HttpURLConnection url_connection2 = (HttpURLConnection) url2.openConnection();
            url_connection2.setRequestMethod("GET");
            
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "", output2 = "";
            
            BufferedReader br2 = new BufferedReader(new InputStreamReader(url_connection2.getInputStream()));
            
            
            while((output = br.readLine())!= null)
            {
                st.append(output + "\n");
            }
            
             while((output2 = br2.readLine())!= null)
            {
                str2.append(output2);
            }
            
            String result = st.toString();
            
            String rates = str2.toString();
            String rates2 = " ";
            Double rates3 = 0.0;
            
            String arr[] = rates.split(" ");
            rates2 = arr[0];   
            rates3 = Double.parseDouble(rates2);
         
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(result);
            JSONArray companies = (JSONArray)jsonObject.get("Company");
            
            for(Object o : companies)
            {
                JSONObject company = (JSONObject) o;
                String name = (String)company.get("companyName");
                String symbol = (String)company.get("companySymbol");
                Long number = (Long)company.get("number");
                String currency = (String)company.get("currency");
                Double price = (Double)company.get("price");
                Double converted_price = price * rates3;
                String date = (String)company.get("date");
                
                names.add(name);
                symbols.add(symbol);
                numbers.add(number.doubleValue());
                currencies.add(currency);
                prices.add(converted_price);
                dates.add(date);
                
                index = symbols.indexOf(code);
                
            }
            
            str.append("=======================================================\n");
            str.append("Details of the Company along with converted price:\n");
            str.append("=======================================================\n");
            str.append(names.get(index) + "\n" + symbols.get(index) + "\n" + numbers.get(index)+ "\n" + 
                    currencies.get(index)+ "\n" + prices.get(index)+ "\n" + 
                        dates.get(index));
            br.close();
            textArea.setText(str.toString());
            
        } catch (Exception e) {
            e.printStackTrace();
        } 
        
    }//GEN-LAST:event_currencyConvertorActionPerformed

    private void latestRatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latestRatesActionPerformed
        // TODO add your handling code here:
        try
        {
            URL url = new URL(URL_latest);
            HttpURLConnection url_connection = (HttpURLConnection) url.openConnection();
            url_connection.setRequestMethod("GET");
            BufferedReader br = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));
            String output = "";
            StringBuilder str = new StringBuilder();
            
            while((output = br.readLine())!= null)
            {
                str.append(output + "\n");
            }
            
            br.close();
            textArea.setText(str.toString());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(sharesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_latestRatesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sharesClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sharesClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sharesClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sharesClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sharesClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JTextField buy_No;
    private javax.swing.JTextField buy_code;
    private javax.swing.JTextField cmp_code;
    private javax.swing.JTextField conv_code;
    private javax.swing.JTextField curr_code;
    private javax.swing.JButton currencyConvertor;
    private javax.swing.JButton display_code;
    private javax.swing.JButton highestPrice;
    private javax.swing.JButton highestShares;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton latestRates;
    private javax.swing.JButton listAllShares;
    private javax.swing.JButton lowestPrice;
    private javax.swing.JButton lowestShares;
    private javax.swing.JButton search_button;
    private javax.swing.JTextField sell_No;
    private javax.swing.JTextField sell_code;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton updateShares;
    // End of variables declaration//GEN-END:variables
}
